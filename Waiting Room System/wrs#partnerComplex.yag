{{/*
MADE BY: mangowhite#0001 (209208777365389312)
REQUESTED BY: 𝑴𝒆𝒍𝒌 𝑻𝒆𝒓𝒕𝒋𝒊𝒆♡☘#0001 (441642976058277898)
DESCRIPTION: This is a command that takes many arguments and is used to decide wether or not two elements want to "partner" up, as requested by the buyer. Included in this file are the following operations: 1. The first user locks himself and the target into a database value and leaves the second subject to choose if they'll be connected to each other; 2. The second user uses the options <accept|reject> to choose if they'll be connected or not to the request sender; 3. Finally, if no args are exemplified and a database entry for the user exists, the output will be the current partner of the supplied user trigger.
RECOMMENDED TRIGGER: Command Trigger; partner
USAGE METHOD: -partner <accept/deny(or aliases)|mention>

MIT LICENSE
Copyright (c) 2022 mangowhite
*/}}

{{/*Settings*/}}
{{$aliases:= sdict
    "accept" (cslice "accept" "yes" "y")
    "reject" (cslice "reject" "deny" "no" "n")}}
{{$messages:= sdict
    "partnerRequest" "Yay! Someone has requested partnership with you! Will you accept?"
    "partnerAccept" "Marvelously amazing! You both are now partnered!"
    "partnerDeny" "Aw... you got rejected... There's a lot of fish in the sea, don't give up!"
    "partnerBreakUp" "You cancelled the partnership!"}}

{{$ex := or (and (reFind "a_" .Guild.Icon) "gif" ) "png" }}
{{$icon := print "https://cdn.discordapp.com/icons/" .Guild.ID "/" .Guild.Icon "." $ex "?size=1024" }}
{{$embed:= sdict
    "color" 12845311
    "title" "Partnerships"
    "author" (sdict "name" .Guild.Name "icon_url" $icon)
    "footer" (sdict "text" (print "Generated by: " .User.Username) "icon_url" (.User.AvatarURL "1024"))
    "timestamp" currentTime}}

{{/*
CODE
Please, do not edit after this line. Code below this line that do not match the one present in the github repository won't receive maintenance.
*/}}
{{$helpDb:= or (dbGet 0 "help").Value sdict}}
{{$helpDb.Set .Cmd (sdict 
"description" (print "Partner up with someone in " .Guild.Name "!")
"aliases" (print "Accepting: " .Cmd " " (joinStr "," $aliases.accept) "\nRejecting: " .Cmd " " (joinStr "," $aliases.reject))
"category" "wrs"
)}}
{{dbSet 0 "help" $helpDb}}
{{$db:= or (dbGet 0 "partners").Value dict}}

{{/*No arguments error handler*/}}
{{$err:= print "❌ Something stopped the execution of this command, " .User.Mention ":"}}
{{if not .CmdArgs}}
    {{if not ($db.Get .User.ID)}}
        {{$err = print $err " No arguments were provided. To accept a request, use one of these aliases: `" (joinStr "," $aliases.accept.StringSlice)  "`; to deny, `" (joinStr "," $aliases.reject.StringSlice) "` and to create a dispute, use `" .Cmd " <@userMention>`." }}
        {{sendMessage nil $err}}
    {{else}}
        {{$partner:= (getMember ($db.Get .User.ID).isBusy).User.Mention}}
        {{if not ($db.Get .User.ID).pending}}
            {{sendMessage nil (print "💞 Currently partnered with " $partner ".")}}
        {{else}}
            {{sendMessage nil (print "⏲️ Currently waiting for partnership approval with " $partner ".")}}
        {{end}}
    {{end}}

{{/*User & string argument handler*/}}
{{else}}
    {{$argument:= ""}}
    {{$isUser:= false}}
    {{if not (reFind `\A(\s+)?(<@!?\d{17,19}>)` (slice .Message.Content (len .Cmd)))}}
        {{$argument = index .CmdArgs 0}}
    {{else}}
        {{$argument = index .Message.Mentions 0}}
        {{if ne $argument.ID .User.ID}}
            {{$isUser = true}}
        {{else}}
            {{$err = print $err " You can't partner yourself."}}
            {{$isUser = true}}
        {{end}}
    {{end}}

    {{/*Request command handled by mention*/}}
    {{if $isUser}}
        {{if ($db.Get .User.ID).isBusy}}
            {{$err = print $err " You already have a pending request with " (getMember ($db.Get .User.ID).isBusy).User.Mention "."}}
            {{sendMessage nil $err}}
        {{else if ($db.Get $argument.ID).isBusy}}
            {{$err = print $err " This user already has a pending request with " (getMember ($db.Get $argument.ID).isBusy).User.Mention "."}}
            {{sendMessage nil $err}}
        {{else if eq .User.ID $argument.ID}}
            {{sendMessage nil $err}}
        {{else}}
            {{$db.Set .User.ID (sdict "isBusy" $argument.ID "pending" true "sender" true)}}
            {{$db.Set $argument.ID (sdict "isBusy" .User.ID "pending" true)}}
            {{dbSet 0 "partners" $db}}

            {{$embed.Set "description" $messages.partnerRequest}}
            {{$embed.Set "fields" (cslice
                (sdict "name" "Admirer" "value" .User.Mention)
                (sdict "name" "Choice" "value" (print "`" .Cmd " accept/reject.`\n\n💡*See aliases using the command without arguments.*") "inline" true)
            )}}
            {{sendMessage nil (complexMessage "content" $argument.Mention "embed" $embed)}}
        {{end}}

    {{/*Accept and reject commands handled by arguments*/}}
    {{else}}
        {{$isSender:= or ($db.Get .User.ID).sender false}}
        {{if ($newPartner := ($db.Get .User.ID).isBusy)}}
            {{/*Accept command*/}}
            {{if in $aliases.accept $argument}}
                {{if not $isSender}}
                    {{($db.Get $newPartner).Set "pending" false}}
                    {{($db.Get .User.ID).Set "pending" false}}
                    {{dbSet 0 "partners" $db}}

                    {{$embed.Set "description" $messages.partnerAccept}}
                    {{sendMessage nil (complexMessage "content" (print .User.Mention " 💞 " (getMember $newPartner).User.Mention) "embed" $embed)}}
                {{else}}
                    {{$err = print $err "No one requested to partner up with you, but you recently invited an user, if you want to cancel it, type `" .Cmd " deny`."}}
                    {{sendMessage nil $err}}
                {{end}}
            {{/*Reject command*/}}
            {{else if in $aliases.reject $argument}}
                {{$db.Del $newPartner}}
                {{$db.Del .User.ID}}
                {{dbSet 0 "partners" $db}}
                
                {{if not $isSender}}
                    {{$embed.Set "description" $messages.partnerDeny}}
                    {{sendMessage nil (complexMessage "content" (getMember $newPartner).User.Mention "embed" $embed)}}
                {{else}}
                    {{$embed.Set "description" $messages.partnerBreakUp}}
                    {{sendMessage nil (complexMessage "content" .User.Mention "embed" $embed)}}
                {{end}}
            {{else}}
                {{$err = print $err " No supported entries/aliases found in user input. Did you mean `" .Cmd " accept|deny (or aliases)`?"}}
                {{sendMessage nil $err}}
            {{end}}
        {{else}}
            {{$err = print $err " You don't have a pending request. Generate one by typing `" .Cmd " <@userMention>`"}}
            {{sendMessage nil $err}}
        {{end}}
    {{end}}
{{end}}